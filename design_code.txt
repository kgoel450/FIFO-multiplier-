module SynchronousFIFO #(parameter DEPTH = 8, DATA_WIDTH = 8, MULTIPLIER_WIDTH = 8)(
  input clk, rst_n,
  input w_en, r_en,
  input [DATA_WIDTH-1:0] data_in,
  input [MULTIPLIER_WIDTH-1:0] multiplier,
  output reg [DATA_WIDTH-1:0] data_out,
  output reg full, empty
);

  reg [DATA_WIDTH-1:0] fifo [DEPTH-1:0];
  reg [$clog2(DEPTH)-1:0] w_ptr, r_ptr;

  // Default values on reset
  always @(posedge clk) begin
    if (!rst_n) begin
      w_ptr <= 0;
      r_ptr <= 0;
      data_out <= 0;
      full <= 0;
      empty <= 1;
    end
  end

  // Write data to FIFO
  always @(posedge clk) begin
    if (w_en && !full) begin
      fifo[w_ptr] <= data_in;
      w_ptr <= w_ptr + 1;
      if (w_ptr == DEPTH - 1) w_ptr <= 0;
      full <= (w_ptr == r_ptr);
      empty <= 0;
    end
  end

  // Read data from FIFO with multiplication
  always @(posedge clk) begin
    if (r_en && !empty) begin
      data_out <= fifo[r_ptr] * multiplier;
      r_ptr <= r_ptr + 1;
      if (r_ptr == DEPTH - 1) r_ptr <= 0;
      empty <= (r_ptr == w_ptr);
      full <= 0;
    end
  end
endmodule