module SynchronousFIFO_tb;

  // Parameters
  parameter DEPTH = 8;
  parameter DATA_WIDTH = 8;
  parameter MULTIPLIER_WIDTH = 8;

  // Declare signals
  reg clk, rst_n;
  reg w_en, r_en;
  reg [DATA_WIDTH-1:0] data_in;
  reg [MULTIPLIER_WIDTH-1:0] multiplier;
  wire [DATA_WIDTH-1:0] data_out;
  wire full, empty;

  // Instantiate FIFO module
  SynchronousFIFO #(.DEPTH(DEPTH), .DATA_WIDTH(DATA_WIDTH), .MULTIPLIER_WIDTH(MULTIPLIER_WIDTH))
    dut (.clk(clk), .rst_n(rst_n), .w_en(w_en), .r_en(r_en),
         .data_in(data_in), .multiplier(multiplier), .data_out(data_out), .full(full), .empty(empty));

  // Clock generation
  always #5 clk = ~clk;

  // Test scenario
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0, SynchronousFIFO_tb);

    // Initialize inputs
    clk = 0; rst_n = 0; w_en = 0; r_en = 0; data_in = 8'b11110000; // Assign data_in directly
    multiplier = 3; // Set multiplier value

    // Reset
    #10;
    rst_n = 1;

    // Write some data (you can continue writing operations here if needed)
    // For example:
    @(posedge clk);
    w_en = 1;
    data_in = 8'b11110000; // Assign a new value to data_in for writing
    #10;
    w_en = 0;

    // Read the written data (with multiplication)
    // For example:
    @(posedge clk);
    r_en = 1;
    #10;
    r_en = 0;

    // End simulation
    $finish;
  end
endmodule